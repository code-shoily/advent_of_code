defmodule AdventOfCode.Helpers.Summarizer do
  @moduledoc """
  Collects summary information about the codebase such as number of stars, problems solved etc
  """

  alias AdventOfCode.Helpers.Meta

  @year_range 2015..2023

  def summarize do
    metadata = Map.new(@year_range, &{&1, Meta.get_info(&1, true)})

    total_stars =
      metadata |> Enum.map(fn {_, %{completed: completed}} -> completed end) |> Enum.sum()

    header =
      "| Day | [2015](/lib/2015) | [2016](/lib/2016) | [2017](/lib/2017) | [2018](/lib/2018) | [2019](/lib/2019) | [2020](/lib/2020) | [2021](lib/2021) | [2022](lib/2022) | [2023](lib/2023)"

    trophy = "## :trophy: #{total_stars}/400"

    content =
      for i <- 0..25 do
        generate_stat_row(metadata, i)
      end

    """
    #{trophy}

    #{header}
    |:---:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
    #{content}
    """
  end

  def generate_stat_row(metadata, 0) do
    stars =
      for year <- @year_range do
        metadata[year].completed
      end
      |> Enum.join(" | ")

    """
    | :star2: | #{stars} |
    """
  end

  def generate_stat_row(metadata, day) do
    counts =
      for year <- @year_range do
        case metadata[year].summary[day] do
          nil -> " "
          %{count: count} -> award(count)
        end
      end
      |> Enum.join(" | ")

    """
    | #{day} | #{counts} |
    """
  end

  def build_heading(year) do
    links =
      for current_year <- @year_range do
        if current_year == year do
          to_string(current_year)
        else
          "[#{current_year}](/lib/#{current_year})"
        end
      end

    """
    <!-- AUTOGENERATED -- DO NOT EDIT -- use `mix gen_stats` -->
    # Advent of Code #{year}

    [Main Page](https://adventofcode.com/#{year}) | [Tests](/test/#{year})

    #{links |> Enum.join(" | ")}
    """
  end

  def yearwise_readme(year) do
    heading = build_heading(year)
    info = Meta.get_info(year)
    trophy = "## :trophy: #{info.completed}/50"

    {table_header, aligner, table_content} = summary_table(info.summary)

    """
    #{heading}

    #{trophy}

    #{table_header}
    #{aligner}
    #{table_content}
    """
  end

  def tag_page, do: generate_subpage("Tags", :tag_summary, fn {k, _} -> k end)

  def difficulty_page,
    do:
      generate_subpage("Difficulties", :difficulty_summary, fn {k, _} -> difficulty_level(k) end)

  defp generate_subpage(title, attr, sorter) do
    metadata =
      Meta.solutions_summary()
      |> Map.values()
      |> Enum.map(& &1[attr])
      |> Enum.reduce(%{}, fn x, acc ->
        Map.merge(acc, x, fn _, v1, v2 -> v1 ++ v2 end)
      end)
      |> Enum.sort_by(sorter)

    content =
      metadata
      |> Enum.map(fn {head, summary} ->
        {table_header, aligner, table_content} = summary_table(summary, true)

        """
        ## #{head}

        #{table_header}
        #{aligner}
        #{table_content}
        """
      end)

    """
    # #{title}

    #{content}
    """
  end

  def summary_table(summary, show_year \\ false) do
    table_header =
      "| Day | Problem Page | Status | Difficulty | Solution Page | Test Page | Tags |"

    table_content =
      for {day,
           %{
             title: title,
             link: link,
             count: count,
             difficulty: difficulty,
             solution: solution,
             test: test,
             tags: tags,
             year: year
           }} <- summary do
        day = (show_year && "#{year}/#{day}") || day

        """
        | #{day} | [#{title}](#{link}) | #{award(count)} | #{difficulty(difficulty)} | #{linkify(solution)} | #{linkify(test)} | #{tags(tags)} |
        """
      end

    aligner = "| :---: | :------: | :---: | :---: | :---: | :---: | :---: |"

    {table_header, aligner, table_content}
  end

  @difficulty_sizes ~w/xs s m l xl xxl/
  defp difficulty_level("xs"), do: 1
  defp difficulty_level("s"), do: 2
  defp difficulty_level("m"), do: 3
  defp difficulty_level("l"), do: 4
  defp difficulty_level("xl"), do: 5
  defp difficulty_level("xxl"), do: 6
  defp difficulty_level(_), do: 7

  defp difficulty_icon(count), do: ":snowflake:" |> List.duplicate(count) |> Enum.join(" ")

  defp difficulty(size) when size in @difficulty_sizes,
    do: size |> difficulty_level() |> difficulty_icon()

  defp difficulty(_), do: ":shrug:"

  defp tags(tags), do: tags |> Enum.map_join(", ", fn tag -> "[#{tag}](/tags.md##{tag})" end)

  defp award(1), do: ":2nd_place_medal:"
  defp award(2), do: ":1st_place_medal:"

  defp linkify(link) do
    file = link |> String.split("/") |> List.last()
    "[#{file}](#{link})"
  end
end
