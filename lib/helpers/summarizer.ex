defmodule AdventOfCode.Helpers.Summarizer do
  @moduledoc """
  Collects summary information about the codebase such as number of stars, problems solved etc
  """

  alias AdventOfCode.Helpers.Meta

  @year_range 2015..2023

  def summarize do
    metadata = Map.new(@year_range, &{&1, Meta.get_info(&1, true)})

    total_stars =
      metadata |> Enum.map(fn {_, %{completed: completed}} -> completed end) |> Enum.sum()

    header =
      "| Day | [2015](/lib/2015) | [2016](/lib/2016) | [2017](/lib/2017) | [2018](/lib/2018) | [2019](/lib/2019) | [2020](/lib/2020) | [2021](lib/2021) | [2022](lib/2022) | [2023](lib/2023)"

    trophy = "## :trophy: #{total_stars}/400"

    content =
      for i <- 0..25 do
        generate_stat_row(metadata, i)
      end

    """
    #{trophy}

    #{header}
    |:---:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
    #{content}
    """
  end

  def generate_stat_row(metadata, 0) do
    stars =
      for year <- @year_range do
        metadata[year].completed
      end
      |> Enum.join(" | ")

    """
    | :star2: | #{stars} |
    """
  end

  def generate_stat_row(metadata, day) do
    counts =
      for year <- @year_range do
        case metadata[year].summary[day] do
          nil -> " "
          %{count: count, solution: solution} -> award_with_link(count, solution)
        end
      end
      |> Enum.join(" | ")

    """
    | #{day} | #{counts} |
    """
  end

  def build_heading(year) do
    links =
      for current_year <- @year_range do
        if current_year == year do
          to_string(current_year)
        else
          "[#{current_year}](/lib/#{current_year})"
        end
      end

    """
    <!-- AUTOGENERATED -- DO NOT EDIT -- use `mix gen_stats` -->
    # Advent of Code #{year}

    [Main Page](https://adventofcode.com/#{year}) | [Tests](/test/#{year})

    #{links |> Enum.join(" | ")}
    """
  end

  def yearwise_readme(year) do
    heading = build_heading(year)
    table_header = "| Day | Problem Page | Status | Difficulty | Solution Page | Test Page | Tags |"
    info = Meta.get_info(year)
    trophy = "## :trophy: #{info.completed}/50"

    table_content =
      for {day, line} <- info.summary do
        """
        | #{day} | [#{line.title}](#{line.link}) | #{award(line.count)} | #{difficulty(line.difficulty)} | #{linkify(line.solution)} | #{linkify(line.test)} | #{tags(line.tags)} |
        """
      end

    """
    #{heading}

    #{trophy}

    #{table_header}
    | :---: | :------: | :---: | :---: | :---: | :---: | :---: |
    #{table_content}
    """
  end

  defp difficulty_level_icon(count), do: ":snowflake:" |> List.duplicate(count) |> Enum.join(" ")

  defp difficulty("xs"), do: difficulty_level_icon(1)
  defp difficulty("s"), do: difficulty_level_icon(2)
  defp difficulty("m"), do: difficulty_level_icon(3)
  defp difficulty("l"), do: difficulty_level_icon(4)
  defp difficulty("xl"), do: difficulty_level_icon(5)
  defp difficulty("xxl"), do: difficulty_level_icon(6)
  defp difficulty(_), do: ":shrug:"

  defp tags(tags), do: tags |> Enum.join(", ")

  defp award(1), do: ":2nd_place_medal:"
  defp award(2), do: ":1st_place_medal:"

  defp award_with_link(count, link) do
    "[#{award(count)}](#{link})"
  end

  defp linkify(link) do
    file = link |> String.split("/") |> List.last()
    "[#{file}](#{link})"
  end
end
